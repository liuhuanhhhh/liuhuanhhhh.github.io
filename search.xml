<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python常用中英文对照表]]></title>
    <url>%2F2019%2F02%2F20%2Fpython%E5%B8%B8%E7%94%A8%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[为了方便大家使用python，整理了一下python常用的中英文对照表：（仅供参考） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241python 大蟒蛇downlaods 下载install 安装customize 自定义path 环境变量：路径optional 可选的feature 特性特点documentation 文档associate 关联shortcuts 快捷方式setup 安装successful 成功library 库scripts 脚本print 打印hello world 你好，世界commond 命令power 能量shell 壳exit 退出integer int 数字string str 字符串define 定义delete del 删除rencent 最近的（时间方面）last 最后的call 调用IDE （integrate Development kit） 集成开发工具tools 工具professional 专业的Development 开发developer 开发者community 社区setup 安装guide 想到installation 安装recommend 建议application 应用possible 可能computer 电脑next 下一步break 中断length 长度 len()parameter 参数 paramargument 参数return 返回 define 定义 deffunction 功能，函数require 必须miss 丢失object 对象、事物callable 可调用default 默认的follow 跟在...后面recursion 递归global 全球，全局的slice 切remove 移除list 列表dict 字典key 键value 值support 支持，具备..功能assignment 分配，任务，工作set 集合operator 操作符union 联合， 并initial 初始化instance 实例class 类attribute attr 属性self 自己property 特性、属性ref reference 引用static 静态的object 对象animal 动物dog 狗cat 猫subclass 子类inherit 继承override 重写salary 薪水offer 入职通知书directory 目录 dirslot 插槽try 尝试finally 最后的，最终except 异常 exceptionraise 抛 投掷chain 链条camel 骆驼declare 声明 redeclare 重复声明expect 预期redundant 小括号blank 空白的line 行 blank line 空白行 new line 新行found 找到 find的过去式read 读 ropen 打开chinese 中文 中国的 中国人english 英语encode 编码 encrypt codedecode 解码union 联合 统一exists 存在year 年month 分钟day 天 日hour 小时minute 分钟second 秒virtual 虚拟的environment 环境satisfied 满意requirement 必需品already 已经准备好了activate 激活draw 画画filter 过滤 ，滤镜affected 受影响## 前端html hyper text markup language 超文本标记语言lang language 语言en english 英语zh 简体中文charset 字符集title 题目head 头body 身体paragraph 段落style 样式align 对齐anchor 锚target 靶子 目标table 桌子 表格row 行col 列span 延伸data 数据padding 填充space 空白order 命令，有序的item 项input 输入action 动作submit 提交reset 重置readonly 只读required 必须 必填select 选择option 选项area 区域form 表单placeholder 占位符## pycharmnew 新建directory 文件夹file 文件copy 复制cut 剪切paste 粘贴refactor 修改rename 重命名move 移动font 字体setting 设置appearance 外观editor 编辑器external 外部的library 库console 终端、命令行terminal 终端todo 待办事情favorites 喜爱，收藏夹structure 结构view 视图，浏览edit 编辑navigate 导航code 代码refactor 更改run 跑，运行tools 工具windows 窗口 布局help 帮助indent 缩进expected 期待，预料PEP8 python官方第8号文件，规定了代码书写风格instance 实例while 当...的时候stop 停止terminate 终止interpreter 解释器range 范围## 数据库radius 半径范围，半径navbar navigation bar导航条collapse 倒塌；失败brand 商标，品牌form string 格式字符串Drop downs 下拉菜单menu item 菜单项；子菜单timestamp 时间戳enterprise 企业localhost 本地主机; 本地服务器alter 改变；修改workbench 工作台，手工台attempt 试图，尝试manually 手动的expire 到期 过期footer 页脚loading 加载，评论initial 初始化scale 缩放meta 标签的优化，元标签Block quote 块引用cite 引用sample 取样，尝试default 默认名称initialize 初始化console 控制台plugin 插件aborting 异常终止temporary 临时的account 理由command 指令trademark 标志corporation 公司，法人denied 拒绝statement 声明synchronize 同步scratch 草稿，刮伤repository 存储库invalidate 无效的caches 缓存]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>中英文对照表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Navicat premium连接出现身份问题]]></title>
    <url>%2F2019%2F02%2F20%2FNavicatpremium%E8%BF%9E%E6%8E%A5%E5%87%BA%E7%8E%B0%E8%BA%AB%E4%BB%BD%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1. 管理员权限运行命令提示符，登陆MySQL mysql -u root -p password #登入mysql 2.修改账户密码加密规则并更新用户密码 ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘password’ PASSWORD EXPIRE NEVER; #修改加密规则 ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘password’; #更新一下用户的密码 3. 刷新权限并重置密码 1FLUSH PRIVILEGES; #刷新权限 再重置下密码：alter user ‘root‘@’localhost’ identified by ‘xxxxxxxx’; 现在在打开Navicat Premiu12连接mysql就连接成功了。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Navicat premium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wsgi准备]]></title>
    <url>%2F2019%2F02%2F16%2Fwsgi%E5%87%86%E5%A4%87%2F</url>
    <content type="text"><![CDATA[(了解)通用应用网关接口下面概念了解即可，知道有WSGI这么个东西。 引题django自带的服务器是单线程的，性能低。所以主流web框架根据统一规定实现了 通用网管接口。 源代码是一个“应用”，应用防止在专门的服务器容器上。好像java中源代码和tomcat容器的关系。 整体部署流程 nginx 做为代理服务器：负责静态资源发送（js、css、图片等）、动态请求转发以及结果的回复； uWSGI 做为后端服务器：负责接收 nginx 请求转发并处理后发给 Django 应用以及接收 Django 应用返回信息转发给 nginx； Django 应用收到请求后处理数据并渲染相应的返回页面给 uWSGI 服务器。 协议介绍CGICGI(Common Gateway Inteface): 字面意思就是通用网关接口，我觉得之所以看字面意思跟没看一样是因为这个称呼本身很学术，所以对于通俗的理解就存在一定困难，这里我觉得直接把 Gateway 当作 server 理解就好。 它是外部应用程序与Web服务器之间的接口标准 意思就是它用来规定一个程序该如何与web服务器程序之间通信从而可以让这个程序跑在web服务器上。当然，CGI 只是一个很基本的协议，在现代常见的服务器结构中基本已经没有了它的身影，更多的则是它的扩展和更新。 FastCGI: CGI的一个扩展， 提升了性能，废除了 CGI fork-and-execute （来一个请求 fork 一个新进程处理，处理完再把进程 kill 掉）的工作方式，转而使用一种长生存期的方法，减少了进程消耗，提升了性能。 WSGIWSGI的全称是Web Server Gateway Interface（Web服务器网关接口），它不是服务器、python模块、框架、API或者任何软件，只是一种描述web服务器（如nginx，uWSGI等服务器）如何与web应用程序（如用Django、Flask框架写的程序）通信的规范。 server和application的规范在PEP3333中有具体描述，要实现WSGI协议，必须同时实现web server和web application，当前运行在WSGI协议之上的web框架有Bottle, Flask, Django。 uwsgiuWSGIuWSGI是一个全功能的HTTP服务器，实现了WSGI协议、uwsgi协议、http协议等。它要做的就是把HTTP协议转化成语言支持的网络协议。比如把HTTP协议转化成WSGI协议，让Python可以直接使用。 uwsgi与WSGI一样，是uWSGI服务器的独占通信协议，用于定义传输信息的类型(type of information)。每一个uwsgi packet前4byte为传输信息类型的描述，与WSGI协议是两种东西，据说该协议是fcgi协议的10倍快。 协议选择uwsgi 底层c，但实际效率优势不大。基于wsgi协议的gunicorn使用配置简单，我们后面以它为例子。 django整理成接口形式https://docs.djangoproject.com/en/2.1/howto/deployment/wsgi/ 本节目标 知道django项目由application和通用网关接口两部分组成。 网关接口有wsgi、uwsgi等协议。 我们将要采用基于wsgi的服务器工具gunicorn。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>wsgi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础准备操作]]></title>
    <url>%2F2019%2F02%2F16%2F%E5%9F%BA%E7%A1%80%E5%87%86%E5%A4%87%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[镜像的准备工作 apt更新源修改源 vim /etc/apt/sources.list更新源 apt-get update升级已安装的包 apt-get upgrade搜索 apt-cache search packagename安装 apt-get install packagename git mysql 注意记住密码 安全组放通端口 修改python软连接 初步测试运行（自带单线程） 本地验证可运行 生成依赖说明文件 pip freeze&gt; requirement.txt这个命令搭配虚拟环境比较好。否则全部包都会生成。可以选择(选做)pipreqs包生成项目所需依赖。 关闭debug模式。django settings.py中debug = False 设置接受的访问ip。allowedhost = [*] 或 [‘127.0.0.1’, ‘localhost’, ‘.example.com’, ‘39.96.114.97’] 。host头攻击原理https://blog.csdn.net/u012397189/article/details/80559028 以wsgi代理项目(django2版本不需操作，默认提供 wsgi.py) sftp上传项目 安装项目依赖 cd到项目根目录下 pip3 install -r requirements.txt如果服务器没有pip3的话 apt install python3-pip 自带单线程启动 python manage.py runserver 0.0.0.0:8000 。这时的数据流是 外部ip→服务器上的django服务， 所以runserver 0.0.0.0。如果后面请求由nginx过来，那么runserver 127.0.0.1:8000即可。 浏览器访问验证。http://[域名]:port 或 http://[服务器ip]:port 。注意阿里云的云盾和安全组白名单访问ip和放通端口。 其它常用软件 apt-get install python3-pip可以换pip源 apt-get install nano apt-get install gitgit生成密钥对后才能clone apt-get install mysql-server默认5.7版本，需要配置字符集才能插入中文。8.1版本需要官网下载deb包然后安装。参考https://www.cnblogs.com/wusr/p/10083754.html 报错 安装依赖是。一些包的安装方式与win不同。看安装到哪个包时报错。cairocffi 需要gcc编译，参考上面链接安装。mysqlclient包需要加载mysqlconfig。需要先安装mysql。pywin不需要。先手动去除requirements.txt项目中不需要的包 （大概率）apt-get install python3-pip 后显示安装成功但无法使用pip3命令/usr/bin下没有。解决apt-get remove 卸载后重装。 (小概率)apt提示进程正在使用中。 ps -a |grep apt 找到pid kill。apt install显示错误，根据提示命令修复。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>基础准备操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初始服务器]]></title>
    <url>%2F2019%2F02%2F16%2F%E5%88%9D%E5%A7%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[简单打通访问全部流程概览 登录服务器 开启一个简单的web服务 浏览器访问ip:port 域名解析 浏览器访问域名 1. 准备服务器，确保网络畅通 阿里云后台查看服务器是否开机 检查客户端到服务器的互联网连接。(可选)从客户端ping 一下自己的服务器ip。 (有些服务器设置禁ping，ping不通不一定代表有问题) 检查服务器互联网连接。ssh登录服务器后安装下软件试试。 (重要)确认安全组。 入口：/ECS云服务器/网络和安全/安全组 服务器防火墙。iptable。新服务器默认不会设置。上述几点需要注意安全组，其它一般情况下没问题。 简单测试 开启一个简单的web服务python3 -m http.server 浏览器访问ip:port服务器ip:8000数据流程: 互联网上某台电脑 → 云ECS服务器 → web服务 域名解析因为ip不好记所以购买域名域名 → ip:port → 服务器上的服务，访问ip:port变为访问域名。 配置域名解析入口: 购买域名的服务商提供域名解析配置。这里以阿里云-万网为例子。云解析购买的域名例如 1owo.com 我的服务器ip47.95.227.220 (常用)A 固定域名映射到服务器ipA @ http://1owo.com → ipA www http://www.1owo.com → ip (常用)二级域名二级域名 news.163.com game.163.com news game就是二级域名。对网站业务逻辑做划分。 cname 一个域名指向另一个域名。 场景：域名贩子。 AAAA ipv6，未来将会流行。 MX 邮件服务相关。 注意需要阿里云实名认证。云解析需要实名认证，1-5个工作日，跟备案不同。域名解析成功后会在各级dns服务器上生效10min-2day。想较快验证可以设置自己电脑的dns服务器地址为阿里云dns223.5.5.5 测试 服务器开启建议web服务python3 -m http.server 127.0.0.1:80 浏览器会自动省略80端口，浏览器地址栏访问 http://1owo.com 或http://1owo.com:80效果一致。 备案阿里云备案https://beian.aliyun.com/?spm=5176.8142029.digitalization.17.5aff6d3e9AZJxT根据教程提供个人信息。河南管局规则https://help.aliyun.com/knowledge_detail/50254.html?spm=a2c4g.11186631.2.1.2bcf76583OxhJ4 提交初步信息 → 阿里云通过 → 管局 → 成功。提交初步信息后阿里云可能会电话沟通。 注意 网站类型参考 https://help.aliyun.com/knowledge_detail/36948.html#section-rdk-mvr-zdb要求非常严格，避免关键字、登录注册等多用户相关功能。建议’某某的个人简历’。待备案通过后再更换后台代码。 备案期间云服务器不计费。 阿里云通过后需要拍照，邮寄幕布，拍照严格按照要求。 管局审核中会要求现场拍照。 成功后阿里云后台会有提示。 去管局备案网站激活，注意保存备案网密码。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>初始服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gunicoion]]></title>
    <url>%2F2019%2F02%2F16%2Fgunicoion%2F</url>
    <content type="text"><![CDATA[🦄Gunicorn介绍django自带的单进程单线程服务无法满足多人同时访问的性能。 Gunicorn“green unicorn绿色独角兽”是一个被广泛使用的高性能的Python WSGI UNIX HTTP服务器，移植自Ruby的独角兽（Unicorn ）项目,使用pre-fork worker模式，具有使用非常简单，轻量级的资源消耗，以及高性能等特点。 Gunicorn 服务器作为wsgi app的容器，能够与各种Web框架兼容（flask，django等）,得益于gevent等技术，使用Gunicorn能够在基本不改变wsgi app代码的前提下，大幅度提高wsgi app的性能。 (了解)原理参考 原理worker (不重要)gunicorn WSGI vs uWSGIhttps://ivan-site.com/2012/10/gevent-gunicorn-vs-uwsgi/ 安装官网pip3 install gunicorn 简单启动cd /home/yangzheng/jbt_blog/gunicorn -w 1 -b 0.0.0.0:8000 jbt_blog.wsgi:application 多进程启动配置yourproject/gunicorn.conf 1234567891011bind = &apos;0.0.0.0:8000&apos;workers = 2daemon = Falseproc_name = &apos;app&apos; # 进程名loglevel=&apos;info&apos;#chdir = &apos;/home/yangzheng/jbt_blog/jbt_blog&apos; #gunicorn要切换到的目的工作目录#accesslog = &quot;/home/log/gunicorn_access.log&quot; #访问日志文件#errorlog = &quot;/home/log/gunicorn_error.log&quot; #错误日志文件accesslog = &quot;-&quot; #访问日志文件，&quot;-&quot; 表示标准输出errorlog = &quot;-&quot; #错误日志文件，&quot;-&quot; 表示标准输出 worker数量建议cpu核心数*2+1。配置nginx时，需要将此bind地址写入nginx配置文件中。daemon = True 下面启动就不用nohup关键字了。 以配置方式启动: cd到项目根目录;gunicorn -c gunicorn.conf jbt_blog.wsgi nohup和&amp;目前一个问题是退出程序后命令随之结束导致web无法访问。nohup和&amp;区别参考 https://blog.csdn.net/hl449006540/article/details/80216061 &amp;&amp;让命令进程在后台执行。命令后接&amp; 在后台运行，这时前台可以继续执行其它命令，并且刚才的命令不会中断。python3 -m http.server &amp;任务相关命令：以后台运行： 命令后&amp; 或ctrl+Z查看后台任务：jobs后台转前台：fg [job_id]（下面几个命令常用）查看进程：ps -ef查看端口：netstat -tnp | grep 8000结束进程：kill -9 [pid] nohuphup中断的意思。ssh会话关闭后仍然运行。用法：nohup放在 命令前 nohup python3 -m http.server这样的进程叫守护进程deamon。经常连用nohup command &amp; 来让程序一直在后台运行。 (最终)启动cd /home/yangzheng/jbt_blognohup gunicorn -c gunicorn.conf jbt_blog.wsgi &amp; 终止结束后台运行的程序以释放端口ps -ef | grep gunicorn 可以看到多个worker进程kill [pid]其它可能用到的命令netstat -tnlp 查看监听中的端口killallkill -9 [pid] 强制执行 参考gunicorn原理https://www.cnblogs.com/nanrou/p/7026802.htmlhttps://blog.csdn.net/y472360651/article/details/78538188 报错同时在pip 和pip3下安装gunicorn， /usr/bin/下的命令实际指向py2.解决pip uninstall, pip3 uninstall ,pip3 install]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>gunicoion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx]]></title>
    <url>%2F2019%2F02%2F16%2Fnginx%2F</url>
    <content type="text"><![CDATA[介绍和作用作用：进一步提高网站负载。大概原理高并发大量请求时管理请求队列，依次进入gunicorn的进程中。同时比较擅长直接处理纯静态页面，纯静态页面不必通过django渲染出来。gunicorn和nginx，gunicorn是wsgi程序容器，主要服务python web项目。nginx主要负责转发和最开始的请求负载，把请求引流到gunicorn服务上；如果只是静态文件（纯html css），那么可以直接代理静态文件。 正向和反向代理（结合图例理解） 正向指你自己是客户端，访问别人的服务器。反向你自己的服务器上开了个web服务，别人访问你。正向场景：翻墙、爬虫时的代理ip反向场景：nginx ngrok参考 https://blog.csdn.net/u011456940/article/details/53633991 nginx安装apt-get install nginx 配置 指向web服务nano /etc/nginx/nginx.conf我的配置仅供参考。建议先用sftp工具把nginx.conf拷贝到本地，编辑好后再上传，用mv命令移动到位置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109user www-data;worker_processes auto;pid /run/nginx.pid;include /etc/nginx/modules-enabled/*.conf;events &#123; worker_connections 768; # multi_accept on;&#125;http &#123; ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include /etc/nginx/mime.types; default_type application/octet-stream; ## # SSL Settings ## ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ## # Gzip Settings ## gzip on; # gzip_vary on; # gzip_proxied any; # gzip_comp_level 6; # gzip_buffers 16 8k; # gzip_http_version 1.1; # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; ############# custom server &#123; listen 8010; # listen 80 注意安全组放通 server_name 39.96.114.97; # server_name www.1owo.com 注意www前缀的域名解析 #root /home/yangzheng/jbt_blog; #index index.html; #access_log /EdmureBlog/logss/nginx.access.log;#项目自己的日志 默认/var/log/nginx/下 #error_log //EdmureBlog/logss//nginx.error.log;#错误日志 location / &#123; proxy_pass http://127.0.0.1:8000; #请求转发给8000端口上的gunicorn #proxy_set_header Host $host; #proxy_set_header X-Real-IP $remote_addr; #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; #location ~ ^/(media|static)/ &#123; #root /EdmureBlog/; # 静态文件存放路径 #expires 30d; #&#125; &#125;&#125;#mail &#123;# # See sample authentication script at:# # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript# # # auth_http localhost/auth.php;# # pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;# # imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;# # server &#123;# listen localhost:110;# protocol pop3;# proxy on;# &#125;# # server &#123;# listen localhost:143;# protocol imap;# proxy on;# &#125;#&#125; 参考 https://blog.csdn.net/faye0412/article/details/75200607https://www.cnblogs.com/wt11/p/6508980.html注意事项： 静态文件缓存直接代理静态文件比django自带渲染高效。django部署前需要collection static。注意静态文件修改，缓存可能不修改。解决方法修改的图片加版本后缀 xxx-v2.jpg。 gunicorn和django的监听端口改为127.0.0.1，只接受自己机器来自nginx80端口转发来的请求，有利于提高安全性。 常用命令检查配置正误 nginx -t运行 nginx 或 /etc/init.d/nginx start停止 nginx -s stop重启 nginx -s reload 日志和错误排查cat /var/log/nginx/access.log 和/var/log/nginx/error.log由于前面的gunicorn已成功，大部分错误由于url路由配置错误,检查日志可以看请求的url。注意 有时路由配置 ‘/‘,但nignx会自动找’/index’，项目中没有配置这个路由就会报错。 最终梳理下思路客户端浏览器发出请求(ip xx.xx.xx.xx) → 阿里云服务器(云盾、安全组、防火墙) → 服务器(入80端口)→ nginx监听80→转发8000端口的gunicorn的django应用 → 进程(代理django wsgi app)→ django代码中。 (选做但建议做)其它静态文件托管 代理django项目的静态文件。 python manage.py collection注意后台django 图片资源/js/css 更改，浏览器访问没改变，原因图片走nginx缓存。解决，给aaa-v1.jpg ,更改后aaa-v2.jpg,由于新图片无缓存，浏览器访问结果就是最新的。 代理静态简历模板或hexo静态博客或vue项目 申请https证书自学思路：阿里云有免费的，按照教程配置。百度’https nginx’’https免费证书 阿里云’。 免费证书地址，免费选项需要点几下才能出来。。 我的参考配置 (选做)supervisor作用：注册管理进程嫌gunicorn nginx各种命令太长，结束进程重启ps -ef kill pid 几个命令太麻烦？使用supervisor注册服务，重启、崩溃重启更方便。 报错 ngnix配置后请求不到需要查看日志。nginx请求端口会自己加路由/index 所以你的网站没这个路由的话可能报404. 没有pid。解决，说明nginx进程没有启动，按照提示操作后发现80端口被占用，检查发现80端口运行有gunicorn。终止进程换端口，把80端口让给nginx。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库操作]]></title>
    <url>%2F2019%2F01%2F30%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[本篇文章主要介绍一下Mysql的基本操作。 一、关于数据库的基本操作 创建数据库 -&gt;create database + 数据库名称 查看数据库 -&gt;show databases 删除数据库 -&gt;drop database + 数据库名称 使用数据库 -&gt;use + 数据库名称 查看创建数据库的详细信息-&gt;show create databases + 数据库名称 二、关于表的基本操作 显示数据库中的表：show tables 显示表的字段：desc + 表名称 删除表：drop table + 表名称 创建表：create table + 表名称（字段一 类型一，字段二 类型二） 查看创建表的详细信息：show create table + 表名称 三、修改表结构的操作 修改表字段的类型-&gt;alter table +表名称+ modify +字段+字段类型 添加表的字段-&gt; alter table + 表名称 + add +字段+字段类型 添加字段到指定位置-&gt;alter table +表名称 + add +字段+字段类型 +after 字段 删除表字段-&gt;alter table + 表名称 +drop +字段名称 修改指定字段名称-&gt;alter table +表名称 + change +原字段名称 +新字段名称 + 字段类型 四、基本操作–增、删、改、查 “增”—insert（1） 对一行所有字段增加数据语法：insert into +表名称 + values（值1，值2，……）（2） 对指定字段增加数据语法：insert into +表名称 +（字段1，字段2，……）+ values +（值1，值2，……） “删”—delete（1）删除表中指定数据语法：delete from +表名称 +where条件表达式（2）删除表中全部数据语法：delete from +表名称 “改”—update（1）修改表中现存数据语法：update +表名称 +set 字段1=值1,字段2=值2 +where条件PS：若不带where条件，则是对整表记录指定字段进行更新。 “查”—select（1）select的简单查询语法：select +字段1，字段2，字段3 +from +表名称 +where条件PS：若查询全表信息则将所有字段名换为通配符 *。]]></content>
      <categories>
        <category>数据库操作命令</category>
      </categories>
      <tags>
        <tag>数据库命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器配置]]></title>
    <url>%2F2019%2F01%2F23%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[阿里云服务器以阿里云为例 管理控制台购买成功后进入管理控制台。 管理控制台/云服务器ECS/，选择大区域。可以看到实例。涉及协议 ssh服务器在外地机房中，没有显示器。我们需要远程控制服务器来使用。远程控制协议SSH(Secure Shell)。服务器一般默认安装并启用ssh服务，默认22端口。我们个人电脑通过ssh客户端软件，通过公网ip、22端口、用户名密码(密钥对儿)，就可以远程连接和控制服务器了。 ftpfile transfer protocol 简单文件传输协议。传文件传代码。 刚开始服务器默认并没有开启此服务。 sftp基于ssh的文件传输功能。只要登录ssh就能用stfp传输文件。 阿里云阿里云由于更上层的虚拟化软件(openstack)来分配虚拟机资源，所以阿里云控制台提供了一些更高权限、更方便的控制命令。比如：远程连接(相当于个人电脑上的ssh客户端，但优先级更高。场景：新建系统ssh配置禁止root登录，用控制台的远程连接登录再修改配置)，增减配置，开关机，安全组(相当于系统里的防火墙，但优先级更高) 默认全通无规则，密钥对儿() 上面的功能linux系统本身可以实现，但使用阿里云后台实现会更加方便。 ssh工具选择 ssh工具选择(推荐 集成) pycharm自带的tools/ssh 。传文件xshell flashFXP(用的人多，轻量，丑点，缺点没法传文件)putty(推荐)cyberduck小黄鸭for_mac_or_win阿里云控制台ssh 登录网站，阿里云控制台，实例，点击远程连接。【注意保存密码675166】。 (略过)安全组，默认全通，不需操作。ssh、ftp客户端xshell flashFXP putty cyberduck，用法相似。pycharm自带的ssh工具(推荐 集成)菜单/Tools/Deployeement(部署)/configuration(配置) 或 菜单/Tools/start ssh session缺点，每次打开要再次输入信息。通过deployment配置后可以快捷打开。同时可使用sftp和remote host工具传文件。 公网ip地址(从阿里云控制台查看)xx.xx.xx.xx 端口号22 linux用户名root 密码 (了解)sshd confssh配置如果上面登录失败，并且确认自己信息正确。那么问题在服务器ssh服务默认配置。默认配置为了安全考虑可能禁止root用户直接登录。那么需要阿里云控制台远程连接后修改配置或创建普通用户。参考 http://www.cnblogs.com/Rozdy/p/4642928.htmlvim /etc/ssh/sshd_config PORT=22PermitRootLogin yesMaxSessions 最大同时登录用户数 设置大一点PermitPassword 设置为yes如果已经生成密钥对并想更安全的话，上面配置修改端口、应该为PermitRootLogin改为no。修改完设置后需要重启sshd service sshd restart。 错误排查：除了上面的设置，如果还登录不上，检查日志。log_info改为debug级别获取更多信息。cat /var/log/auth.log如果没有请求说明防火墙，检查linux防火墙或阿里云安全组看公网入方向有没有放通sshd服务端口。如果有请求再错误排查。 还没有解决：提交阿里云工单。https://www.v2ex.com/t/299031解决，提交工单后提示 https://help.aliyun.com/knowledge_detail/37914.html?spm=5176.11065259.1996646101.searchclickresult.388a5fd9BfLynw 云盾导致，公司ip添加白名单后解决。 2安装完系统后再指定root密码如果安装过程中没有设置过root密码，那么初次登录时用账户root，这时root密码并不是空。第一次使用需要先设置root密码。sudo passwd root这时系统提示“请输入新的UNIX密码”。 3密钥对登录原始操作：ssh工具在服务端生成密钥对，然后通过ftp工具将私钥传到个人电脑上。优点：更加安全，免输入密码。阿里云：可以通过控制台生成密钥对，绑定云服务器实例，把密钥对下载到电脑上就可以通过密钥方式ssh登录。入口：阿里云控制台-云服务器ECS-网络和安全-密钥对，右上角新建密钥对（名称随便填，创建类型自动新建）。确定后会弹出窗口让用户下载，注意’私钥只有一次下载机会’，下载得到xxx.pem。密钥对控制台刚生成的密钥对右边点绑定，对话框中选择已购买的ecs实例绑定。最终就可以在ssh工具通过密钥登录。 查看系统信息查看延迟：客户机 ping [服务器ip]查看系统硬件：cat /proc/meminfocat /proc/cpuinfodd 复制测硬盘速读工具测互联网速度 pip install speedtest; speedtest-cli]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10不重启环境变量生效]]></title>
    <url>%2F2019%2F01%2F16%2Fwin10%E4%B8%8D%E9%87%8D%E5%90%AF%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%94%9F%E6%95%88%2F</url>
    <content type="text"><![CDATA[很多适合配置完环境变量后都需要重启电脑来生效，下面来说一行代码就不用重启那么麻烦了：以修改环境变量“PATH”为例，修改完成后，进入命令提示符，输入：set PATH=C: 然后在接着输入：echo %PATH% ，可以发现“我的电脑”-&gt;“属性”-&gt;“高级”-&gt;“环境变量”中设置的 PATH 值已经生效。 不用担心窗口中的修改会影响环境变量的值，DOS窗口中的环境变量只是Windows环境变量的一个副本而已。但是对副本的修改却会引发Windows环境变量的刷新，这正是我们想要的！ 拜拜！]]></content>
      <categories>
        <category>电脑问题</category>
      </categories>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git上传github步骤]]></title>
    <url>%2F2019%2F01%2F14%2Fgit%E4%B8%8A%E4%BC%A0github%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"><![CDATA[上传github步骤有些人总是记不住代码上传，下面我为大家整理一下步骤 首先 新建一个仓库 git init # 初始化一下自己要上传的代码 git add . # 选择全部文件上传 git commit -m ‘first commit’ # 提交到本地仓库 git remote add origin git@github.com:xxx/xxx.git # 添加到远程仓库，xxx是你新建的仓库地址 git push -u origin master # 最后一步上传到github 下图是git的操作流程：]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用python发邮件]]></title>
    <url>%2F2019%2F01%2F10%2F%E7%94%A8python%E5%8F%91%E9%82%AE%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[邮件收发场景：工作沟通邮件；登陆注册；广告；修改密码、激活链接；邮件客户端。参考： https://www.1owo.com/python/python/python-python%E5%8F%91%E9%82%AE%E4%BB%B6/ 准备工作：授权。各邮箱大同小异。这里以qq邮箱为例。1&gt; qq邮箱个人首页2&gt; qq邮箱首页/设置/账户 向下翻到POP3/IMAP/SMTP服务。3&gt; 开启 IMAP/SMTP服务 邮件相关协议： SMTP（simple mail transfer protocol）简单邮件传输协议。用于发邮件。 POP3(Post office protocol) 邮局协议。将邮件服务器上资料同步到本地。用于收邮件。 开通以上两种协议后收邮件，发现可以正常收取，但有个问题，通过程序拉取的邮件已下载已阅读，但登录官方邮箱后发现之前下载的邮件仍然是未读状态。说明POP3协议只能简单地收件但不能标记邮件状态。 IMAP(internet mail access protocol) , 交互式邮件存取协议，POP3协议的增强版。标记已读、删除，跟官方邮件服务器状态保持同步，体验较好。 SSL ，数据链路层加密，https基于此技术。qq邮箱的邮件协议也开启了这个加密，代码中注意配置SSL为True。 发邮件的包： smtplib poplib imaplib ，内置包 缺点不太方便 zmail , 中文文档 ，缺点有bug yagmail， https://github.com/kootenpv/yagmail 。star人数多，稳定，国外邮件公司开发的产品。缺点不会自动识别qq邮箱域名，需要手动配置。 pip install yagmail 。注意anaconda环境中只会安装这个包的旧版本。 ssl 链路层加密方式。 收邮件客户端工具，outlook一类。 下面是简单示例12345678910import yagmailsender = &apos;xxxxxxxxxx@qq.com&apos; # 发送人password = &apos;xxxxxxxx&apos; # 邮箱授权服务密码，注意不是qq邮箱登录密码target = &apos;xxxxxxxxx@qq.com&apos; # 接收人邮箱地址。yag = yagmail.SMTP(user=sender, password=password, host=&apos;smtp.qq.com&apos;, port=465, smtp_ssl=True)contents = &apos;测试test&apos;yag.send(to=target, subject=&apos;测试yagmail发邮件&apos;, contents=contents)print(&apos;已发送&apos;) 在下面是稍微复杂的邮件发送示例： 12345678910111213141516171819202122232425262728import yagmailimport ossender = &apos;xxxxxxxxxxxx@qq.com&apos;password = &apos;xxxxxxxxxxxxxx&apos; # 邮箱授权服务密码，注意不是qq邮箱登录密码target = &apos;xxxxxxxxxqq.com&apos;html = &quot;&quot;&quot;&lt;html lang=&quot;zh&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;示例2&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;测试&lt;/h1&gt; &lt;p&gt;lalalalalbalbal&lt;/p&gt; &lt;img src=&quot;https://www.baidu.com/img/bd_logo1.png&quot;/&gt; &lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;attachment_path = os.path.join(os.path.dirname(__file__), &apos;base.png&apos;)print(attachment_path)contents = [&apos;测试yagmail示例2&apos;, html, attachment_path] # [正文，正文，附件]yag = yagmail.SMTP(user=sender, password=password, host=&apos;smtp.qq.com&apos;, port=465, smtp_ssl=True)yag.send(to=target, subject=&apos;yagmail示例2&apos;, contents=contents) # 群发的话收件人为列表print(&apos;发送完成&apos;) 有什么问题下面评论出来我将一一回复·]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql安装]]></title>
    <url>%2F2019%2F01%2F10%2Fmysql%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[mysql是流行的介绍性数据库。首先要安装数据库，选择对应自己的版本数据库www.mysql.com / download（下载）/ community（社区版）/ mysql server(服务器)打开下载页后 operating system（选择操作系统） 选microsoft windows（微软windows系统） msi microsoft windows installer 也就是.exe安装包。好处 有安装向导，自动添加环境变量，自动生成配置文件，自动注册windows服务。 zip archive 也就是.zip压缩包。包含mysql主要文件，但跟windows结合部分 环境变量、服务就需要手动建立。好处是版本最新，控制力强。本课使用.zip。点download，点no thanks不登录就开始下载。安装 新建文件夹C:\Program Files\MySQL 允许权限 .zip安装包解压至刚才新建的文件夹。报解压错误，原因无权限。解决先解压到D盘，然后剪切至目录，弹窗时允许权限。 开启服务 介绍mysql工程的主要文件夹和文件作用。 bin文件夹。可执行二进制程序。客户端mysql.exe, 服务端mysqld.exe， 备份mysqldump.exe data。存放具体的数据。 my.ini 。 数据库服务启动时的默认配置文件，定义了mysql目录，引擎，字符集，日志等关键信息。需要手动建立。 初始化data文件夹和生成root密码。 mysqld –defaults-file=C:\my.ini –initialize –console成功后注意记住生成的随机root密码。data文件夹下可以看到许多文件。可能出现的错误–initialize specified but the data directory has files in it. Aborting.解决删除data下文件。管理员cmd下重新命令。 开启服务 mysqld –console 。出现3306等字样成功，窗口不要关闭。可能出现的错误，找不到data路径，检查第2、3步。管道命名错误，极少人出现，需要my.ini添加配置enable-named-pipe。 客户端登录 mysql -u root -p刚才生成的密码可能出现的错误 ERROR 2003 (HY000): Can’t connect to MySQL server on ‘localhost’ (10061) 说明服务器没有启动。 修改密码alter user ‘root‘@’localhost’ identified by ‘新密码’ PASSWORD EXPIRE NEVER account unlock;\q退出后可以用mysql -u root -p 重新登录。 注册windows服务 mysqld –install MySQL80 –defaults-file=”C:\my.ini”exe安装可能会出现缺少MSVCP140.dll的情况这个网站可以直接下载下来安装即可https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=48145卸载win删除服务 管理员cmd sc delete 服务名]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium介绍]]></title>
    <url>%2F2019%2F01%2F08%2Fseleium%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[简单介绍一下自动测试是什么鬼selenium是浏览器自动化测试框架。主要领域是自动化测试。也可用于爬虫。其框架用脚本驱动主流浏览器（谷歌、火狐、IE）。让浏览器自动打开、点击、翻页、选择标签、取熟悉内容。 运用场景： 代替麻烦重复的人工黑盒测试流程。 京东的爬虫走了一些js请求，有些参数不知道构造方法，很难分析和模拟请求。缺点是效率慢；考虑浏览器操作，项目复杂时编写的脚本更复杂影响开发效率。 教你安装selenium → 驱动 → 浏览器 pip install selenium 安装浏览器对应版本的驱动1&gt; 驱动网址2&gt; 谷歌浏览器/设置/帮助/关于 看下浏览器版本3&gt; 选择对应的版本和平台的zip包下载4&gt; 解压后得到 chromedriver.exe5&gt; chromedriver.exe放入 python解释器/Scripts 目录下6&gt; 重启浏览器7&gt; 然后别忘了配置环境变量8&gt; 最后写一段简单的selenium脚本测试生效。 简单代码示例1234567from selenium import webdriver # 引入上面下载的包import time # 时间包driver = webdriver.Chrome() # 打开浏览器driver.get(&apos;http://www.baidu.com&apos;) #请求网址time.sleep(5) # 停留5秒driver.quit() # 关闭浏览器]]></content>
      <categories>
        <category>自动测试框架</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[django简介]]></title>
    <url>%2F2019%2F01%2F05%2Fdjango%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[django介绍版本：1.x 和 2.x， 2.x不支持python2版本，只支持py3.5及以上版本。1.x路由正则风格 2.x路由风格简单类似flask。 优点：大而全，封装多种功能，开箱即用。目录结构适合中大型程序。缺点，内含的功能有些用不上。 教程：投票应用 确认python版本和django版本已安装。python -m django –version 新建工程项目django-admin startproject mysite 项目目录结构根目录下manage.py启动服务的入口。跟项目同名的mysite文件夹下是主要项目代码。有的项目中这个文件夹又叫做app、src。settings.py设置，urls.py路由。wsgi.py打包应用部署相关。 启动项目 python manage.py runserver 生成应用 python manage.py startapp polls 。project是项目工程，app应用是项目中一个功能模块。polls目录下migrations是sql迁移脚本，admin.py后台插件，apps.py ,models.py定义表结构的类，tests.py单元测试，views.py业务逻辑和HTML渲染。 数据流程浏览器请求url → mysite/urls.py → polls/urls.py → polls/views.py → 返回响应浏览器展示 报错 安装django时报目录权限错误。 解决使用管理员powershell pip安装。 代码修改后未生效，服务器无log。原因进程未正常退出。解决 改端口或任务管理器中结束所有python.exe getaddress函数报错。原因，计算机别名为中文。 时间场景：你的网站世界用户都可访问。网站上线圣诞节活动，0点到24点结束，本国人正常，外国人访问发现活动开始和结束时间提前或延后。 背景知识：TIME_ZONE=’UTC’USE_TZ=True不带时区的时间aware_time, 带时区的时间local_time(本地时间)。GMT、UTC（世界调和时）。中国东8区 UTC+8。python内置的datetime包 now()生成本地时间。如果网站只有国内访问，USE_TZ应该设置为False，时间可以由datetime包生成，存储在数据库的是不带时区的本地时间。 django解决方案：为了避免上面提到的场景，django的解决方案是。基于三方包pytime_tz，由time_zone() 生成带时区的时间，根据TIME_ZONE设置转换UTC时间存入数据库，html渲染时从取出UTC时间，根据访问者的时区转换成访问者当地的时间。 最佳实践： 国内访问， USE_TZ=False TIME_ZONE=’UTC’ datetime.now() time_zone()都行 多国访问，USE_TZUSE_TZ=True TIME_ZONE=’Asia/Shanghi’ time_zone() 可能出现的错误：前台页面时间比实际早8小时，原因USE_TZ=False TIME_ZONE=’Asia/Shanghi’工作中直接操作数据库时记得考虑数据库中的时间是早8小时的。 i18ni18n意为国际化。网站上的菜单不同国家人访问展示不同的语言。原理有个翻译的配置文件。I18N=TRUE 保持默认开启。LANGUAGE_CODE]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫简介]]></title>
    <url>%2F2019%2F01%2F05%2F%E7%88%AC%E8%99%AB%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[网络爬虫网络爬虫(web crawler), 以前经常称为网络蜘蛛(spider), 是按照一定的规则自动浏览万维网并获取信息的机器人程序(或叫脚本), 曾经被广泛的应用于互联网搜索引擎. 使用过互联网和浏览器的人都知道, 网页中除了提供用户阅读的文字信息之外, 还包含一些超链接. 网络爬虫系统正是通过网页中的超链接信息不断获得网络上的其他页面. 正因为如此, 网络数据采集的过程就像一个爬虫或者蜘蛛在网络上漫游, 所有才被形象的称之为网络爬虫或者网络蜘蛛. 爬虫的应用领域在理想的状态下, 所有的ICP(internet Content Provider) 都应该为自己的网络提供API接口来共享它们允许其他程序获取的数据, 在这种情况下爬虫就不是必需品, 国内比较有名的电商平台(如淘宝, 京东等), 社交平台(如QQ/微博/微信等)这些网站都提供了自己的Open Api, 但是这类Open Api通常会对可以抓取的数据频率进行限制. 对于大多数的公司而言, 计时的获取行业相关数据就是企业生存的重要环节之一, 然而大部分企业在行业数据方面的匮乏是其与生俱来的短板, 合理的利用爬虫来获取数据并从中提取出有价值的信息是至关重要的. 当然爬虫还有很多重要的应用领域, 以下列举了其中一部分. 搜索引擎 新闻聚合 社交应用 舆情监控 行业数据 合法性1.网络爬虫领域目前还属于拓荒阶段, 虽然互联网世界已经通过自己的游戏规则建立起一定的道德规范(Robots协议, 全称是’网络爬虫排除标准’), 但在法律部分还在建立和完善中, 也就是说, 现在这个领域暂时还是灰色地带. ‘法不禁止即为许可’, 如果爬虫就像浏览器一样获取的是前端显示的数据(网页上的公开信息), 而不是网站后台的私密敏感信息, 就不太担心法律法规的约束, 因为目前大数据产业链的发展速度远远超过了法律的完善程度. 在爬取网站的时候, 需要限制自己的爬虫遵守Robots协议, 同时控制网络爬虫程序的抓取数据的速度, 在使用数据的时候, 必须要尊重网站的知识产权(从Web2.0时代开始, 虽然Web上的数据很多都是由用户提供的, 但是网站平台是投入了运营成本的, 当用户在注册和发布呢日用时, 平台通常就已经获取了对数据的所有权, 使用权和分发权). 如果违反了这些规定, 在打官司的时候败诉几率就非常高. Robots.txt文件网站告诉爬虫哪些能访问哪些不能访问https://www.taobao.com/robots.txt1234567891011User-Agent: Yahoo! SlurpAllow: /productAllow: /spuAllow: /dianpuAllow: /overseaAllow: /listAllow: /ershouDisallow: /User-Agent: *Disallow: / 注意上面robots.txt第一段的最后一行, 通过设置’Disallow:/’禁止百度爬虫访问除了’Allow’规定页面外的其他所有页面. 因此当你在百度搜索’淘宝’的时候, 搜索结果下方会出现: ‘由于该网站的rebots.txt文件存在限制指令(限制搜索引擎抓取). 系统无法提供该页面的内容描述.’, 百度作为一个搜索引擎, 至少在表面上遵守了淘宝网的robots.txt协议, 所以用户不能从百度上搜索到淘宝内部的产品信息. whois信息 站长工具 whois包 相关工具 chrome devtool使用 postman 抓包工具 reference 刘东灵 的CSDN 博客 《用python写网络爬虫》]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git]]></title>
    <url>%2F2019%2F01%2F05%2Fgit%2F</url>
    <content type="text"><![CDATA[git基本命令1 打开git bash或cmd终端。cd到项目文件夹跟目录下。cd /pycharm/testgit git init 初始化本地仓库git，会看到项目文件夹下生成.git隐藏文件夹，这个文件夹会记录以后每次的更改和提交。常用命令git commit -m “第一次提交” 提交 git Branch 新建分支 git config –global user.email “320571632@qq.com“git config –global user.name “liuhuan” git add 文件名 。 跟踪单个文件git add 1.py git add . 跟踪当前文件夹下所有文件 git merge 副分支。 合并副分支内容到当前分支。 分支(newfeature)git add . git commit -m “”(newfeature)git checkout master(*master)git merge newfeatrue 这样就会把新分支的修改合并到主分支下。 撤回撤销add 文件撤销commit 记录 还原-git log 查看提交记录。记忆一下想要还原的id值。-git reset –hard 提交记录的id 还原到那一次提交时的状态。 git基本命令2##引题代码在本地提交，可以实现版本回退和前进。但是如果本地磁盘损坏，代码丢失，所以我们要把代码往另一台电脑（远程服务器）存一份。好像网盘。实现代码在不同客户端（电脑，笔记本，手机）拷贝下载代码，提交代码到远程服务 ##ssh 非对称加密ssh:主要用途 远程连接另一台计算机对称加密： 明文’abc’,定义加密规则 a–z分别对应1-26，密文’1%2%3’非对称加密A端和B端通讯。A端通过数学方式(RSA加密 生产容易反向破解难)生成一对密钥。A把公钥告诉B 。B想给A发送消息，先把小修用A的公钥加密，传统给A.如果中间被黑客截取 由于黑客没有A的私钥无法解密，最终A收到消息用自己的私钥解密看到的消息 ##远程仓库平台-github 最为流行，主要线上、-gitlab 较为流行，UI漂亮但消耗更多的资源，不少公司局域网内搭建-gitee 阿里云code，国内的代码仓库，基于gitlab或相似技术 ##github使用1.注册登录。网站没有被墙可以直接登录可能出现的问题：注册时报验证错误检查防火墙或代理，用手机注册或科学上网2.左上角搜索仓库。进入一个工程项目中watch 关注，当代码改变，会有邮件提醒star 收藏 收藏到我的文件夹folk 拷贝别人的代码仓库到自己的仓库。方便自己下载这份代码或为这个项目做贡献 除项目外 约定俗成的文件-READ.md 写项目介绍，安装运行步骤。这个文件会在github项目渲染出来。说明书-LICENSE 版权声明 gpl，规定代码是否免费，是否可以修改商用。具体百度-.ignore 忽略一些不想跟踪不想add文件 ###准备：配置密钥对初次使用代码本控制平台。由于代码重要，平台为了防止账户名密码泄露后代码被黑客窃取。你的客户端自己的电脑生成一对密钥，然后将公钥交给平台。这样从平台克隆代码时，不是自己的电脑无法克隆–ssh-keygen命令 一路回车，生成密钥对在用户/用户名/.ssh文件下看到生成的 id-rsa.pub公钥。私钥自己谨慎保存，公钥给你想要沟通的远程平台 ##命令github上随意找一个项目，复制下载里的 ssh链接-git clone ssh链接（形如git@github.com/sss/sss.git） 远程仓库复制到自己的本地电脑上刚开始对方会询问是否接受存储公钥，输入yes,开始clone github新建一个项目，克隆到本地。 本地进行修改，提交-git push origin 把本地提交推送到远程服务器仓库。这样当更换电脑或是本地仓库被破坏时，可以快速从远程仓库克隆回复。origin指远程服务器 -git pull从远程仓库更新新内容到本地。与git clone相比，clone相比，clone是本地什么都没有 克隆下来后的上传 find . -name “.git” | xargs rm -Rf 解除远程链接 git remote add origin git@github.com:liuhuanhhhh/polls.git 绑定github上的仓库链接 git push –set-upstream origin master 上传到远程仓库 从远程复制仓库。pull是本地已经有的仓库，另外开发者提交过远程仓库，远程仓库代码比自己本地仓库代码新，所以本地提交前要先从远程更新提交。 打tag 百度自学，v8.0.14]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库基础1]]></title>
    <url>%2F2019%2F01%2F05%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%801%2F</url>
    <content type="text"><![CDATA[数据库介绍引题为什么使用数据库：我们已经可以存储数据，变量、读写本地文件（txt、csv)。 持久化。内存中的变量当程序重启和电脑断电时丢失数据，而硬盘可以长时间、持久地存储数据。数据存储到硬盘上的过程叫持久化。 数据库更加专业强大。远比纯文本文档、excel表格强大，增删改查和统计函数。 数据库基本概念观察表格、excel表格 ，打开了 学生列表.xls excel表格文档。类比引入数据库概念。 库 schema：好像整个表格文档。 好像一个物流公司共占地100亩，盖了50个仓库，A01仓库负责存储河南客户货物，A02仓库负责存储广州xx项目物料。每一个仓库对应一个项目。 表 table：对应excel表格里sheet1 sheet2。由行内容和列组成。表描述一个类，每一行描述一个对象。 字段 field：对应表格头部的 序号、班级、姓名。好像类的属性。字段里存储的值的类型需要事先定义。 值 value：表格每一行具体存储的信息。 主键 primary key：类似表格中 序号 这一列。数据库中这一列会自增并不会重复。 外键 foreign key: 表1学员信息里一个班级字段引用自另一个表班级信息表的id列。优点易于维护，保持数据一致性。 范式：如某学校，可以把全部信息字段定义到一张表上，也可以分为学员信息表、班级信息表、课程信息表。划分维度、信息耦合度可高可低，具体结合业务逻辑分析。 常见数据库介绍关系型数据库： sqlite：轻量级数据库。功能基础简单，在数据较少情况下性能并不比重型数据库低。优点，python解释器内置驱动，无需安装直接使用，适合初学数据库。手机应用使用的就是它。 mysql：最流行的数据库。中型。开源、php流行推动了mysql的流行。 PostgreSQL: 大象数据库，号称最先进的数据库。从大学兴起的开源数据库、架构优秀、功能前卫，数据量很大的时候，性能衰减不明显。消耗相同硬件资源的情况下性能和稳定性优于mysql数据库。django odoo等python框架官方推荐使用此数据库。但是目前市场占有率还不高。 oracle：地位很高的商用数据库。昂贵、稳定、功能强大，常与java配合使用。 DB2 sybase MSSQL等，其它的商用数据库。 access：微软office套件中包含，轻量，由于数据库门槛，使用者不多。 no-sql（not only sql）型数据库： mongodb 存储单位是文档，json（类似后端dict)结构整个存进去。数据常放在内存中以获得查询性能，定期把数据持久化到硬盘上。 redis 键值对 “name”=”小明” 。 数据库字段类型数据库创建表示要事先告诉计算机硬盘，每张表的每个字段存什么类型、将要存储的内容大还是小。长度过小，内容值存不进去，长度太大，浪费硬盘空间。我们需要选择合适的类型和长度。各数据库字段类型关键字基本一致。mysql oracle postgresql常用字段类型如下： 整数整数：常用INT INTEGER 占4个字节，2**32，可以表示常用范围整数。（不常用）TINYINT（1字节） SMALLINT（2字节） MEDIUMINT（3字节）BIGINT（8字节） 适用身份证号、VIP号码比较长的编号。 浮点数常用 FLOAT(4字节) 单精度小数 。 即使是单精度，范围也不小。DOUBLE(8字节) 双精度小数。场景 金钱计算，轨道计算。 字符串CHAR char(10) 可以存储长度（字节长度）不超过10的字符串。例如”hello”。但由于长度按照字节判断，存unicode编码的中文只能存3个。常用 VARCHAR 0-65535字节，variable char 可变字符串。VARCHAR(5) 可以存储5个中文或5个英文字母。场景 用户名、家庭住址。TEXT TINYTEXT medium longtext ， 场景 大文本存储，书籍文章、用户反馈。BLOB medium longblob ，二进制文件， 场景 图片、视频。但一般不在数据库中存储图片和视频，因为会增加数据库的计算压力和带宽传输压力和备份还原的难度和用户信息静态资源耦合到一起，解决方案是 图片视频存到普通文件目录下，数据库中存储文件路径。 日期DATE 日期， 形如”2018-11-08”常用 DATETIME 日期时间， “2018-11-08 16:52:30” “2018-11-08 16:52:30.123” “2018-11-08 16:52:30 GTM+8”常用 TIMESTAMP 时间戳, 1541667270 1541667270.7252207 1541667270725 sqlite的字段比较简化：INTEGER 整数REAL 浮点数TEXT 字符串NULL 什么都不存 SQLstructured query language 结构化查询语言。专门对数据库进行查找、增加、修改、删除、统计的操作语言。CURD 增删查改 create update retrieve delete。书写风格，关键字大小写都行，建议大写。表名大小写都行，但是在一些数据库中不区分大小写，建议小写。 （重要）基本语法。 查找SELECT 字段1,字段2,字段3,… FROM 表名; python中返回值形如[(1, 502班, 小明, 男), (), ()]。字段比较多时简写为 SELECT FROM 表名; 由于数据库执行时会把转换为字段再执行，性能极微小下降。SELECT * FROM 表名 WHERE 字段1 = 过滤值,字典2=过滤值 ; where限定条件查找。 添加INSERT 字段1,字段2,… INTO 表名 VALUES (1, “小明”, “男”);简写 INSERT INTO 表名 VALUES (1, “小明”, “男”); 修改UPDATE 表名 SET 字段1=新值,字段2=新值 WHERE 字段1 = 过滤值;注意没有where条件限定行的话将会更新整张表。 删除DELETE FROM 表名; 注意会删除整张表。DELETE FROM 表名 WHERE 字段1 = 过滤值; 限定条件删除某些行。 创建表CREATE TABLE 表名 { 字段类型 字段名 其它关键字（主键 备注）， INT id PRIMARY KEY, VARCHAR(20) username ，} 进阶语法：分组group by、统计、聚合having max avg 存储过程：数据库脚本，类似后端语言，有变量、控制语句、函数等。适合书写复杂SQL语句，效率较高。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python数据类型]]></title>
    <url>%2F2019%2F01%2F05%2Fpython%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[字符串详解转义字符因为一些特殊字符是python中的关键字或一些特殊的概念如换行。所以以特殊字符 \ 开头，构造转义字符。常见的转义字符：\n 换行 \t 制表符\’ 单引号 \” 双引号\ 反斜杠 遍历for i in ‘abc’: print(i) a b c 下标访问‘hello’[4] ‘o’ 搜索(了解)’字符串’.count(子字符串) 搜索子串出现次数‘xyaxyaXY’.count(‘xy’)→ 2‘xyaxyaXY’.count(‘xy’, 2)(了解)判断字符串是否以某个字母开头→ 1‘abcd’.startswith(‘a’)→ True‘abcd’.endswith(‘d’)→ True 字符串.find(子串) 找到返回下标，未找到返回-1‘axyaXY’.find(‘xy’)→ 1‘aaXY’.find(‘xy’)→ -1index()方法与find()类似，区别是未找到的时候报错。 替换字符串.replace(老子串，新字符串)‘aaXY’.replace(‘aa’, ‘bb’)‘bbXY’ 分隔(了解)partition把一个字符串切成几块并返回，包含子串。‘xyaxyaXY’.partition(‘xy’)(‘’, ‘xy’, ‘axyaXY’) 字符串.split(子串)，根据子串分成几部分并返回列表，不包含子串。‘xyaxyaXY’.split(‘x’)[‘’, ‘ya’, ‘yaXY’] 连接join()用一个字符串连接可迭代对象的各个项。‘-‘.join([‘小明’, ‘hong’, ‘li’])→ ‘小明-hong-li’ 删除字符串.strip(要删除的子串)‘今天天气真好\n’.strip(‘\n’)→ ‘今天天气真好’ (以下了解start) 大小写转换‘aa AA’.lower()→ ‘aa aa’‘aa AA’.upper()→ ‘AA AA’‘hello world’.capitalize()→ ‘Hello world‘aa AA’.swapcase()→ ‘AA aa’ isxxx判断判断是否字母‘a’.isalpha()→ True判断是否空格‘ ‘.isspace()→ True判断是否数字‘1’.isdigit()→ True判断是否合法的变量名‘a4’.isidentifier()→ True 填充对齐的时候会用到‘’.center(填充后的字符串总长度，要填充的字符串)‘abc’.center(5, ‘_’)→ ‘abc‘右侧填充‘abc’.ljust(10, ‘_’)→ ‘abc_______’左侧填充‘abc’.rjust(10, ‘_’)→ ‘___abc’ （以上了解end）]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python基本]]></title>
    <url>%2F2019%2F01%2F05%2Fpython%E5%9F%BA%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[L2 基础数据类型基本数据类型 字符串 string： 单引号括起来，中间是一些字符信息。双引号也可以。三个双引号括起来，中间内容可以换行。字符：表达信息，’a’ ,’中’，多个字符组成了字符串。 整形 integer（数字）： 整数，例如 -1， 0 ，1， 3 ，100。 浮点数 float(数字): 小数，例如 1.1， 3.3333， 科学计数法1.3e2 布尔（bool）： 真True ， 假False 字节 byte： 计算机中存储的二进制0101。形如b’\x1e\x3d’。 数字与字符串类型转换‘1’ + 2 报错类型不同。明确 ‘1’ 跟 1 不是一种类型。字符串转整数： int(‘1’) 1字符串转浮点数: float(‘3.5’) 3.5数字转字符串: str(3.5) ‘3.5’ 变量常量：不变的量。变量 variable：可变的量。a=1 b=2 a+b等于3。a=2 a+b等于4。变量让编程具有灵活性。变量赋值： a = 1 (了解 讲完函数后讲生成式前)等号本质改变的是指针引用。a = printa(‘hello’) None：表示什么都没有，没有类型也不占空间。注意a=None跟a=’’不一样。 变量使用前要先声明。 命名规则： 字母或下划线开头，后面可以是字母或数字，中间可以有下划线，中间不能有空格，不能有特殊字符。 a, student1, student_name 这些变量名都是合法的。 type(): 判断变量类型。 a=1 type(a) (了解）动态语言java是强类型语言，使用变量前要先声明变量类型 int a = 0,如果再a=’hello’ 会报类型错误。但是python中就可以，所以python是弱类型（动态类型）语言，其它的弱类型语言还有javascript。强类型优点是严谨，弱类型优点是使用方便。 (了解) 变量在内存中内存就好像一个大仓库，仓库里有很多小房间。当我们声明一个变量时a=1234，就占用了一个小房间。 id(): id(a) 返回变量的内存地址。 a=1234 id(a) 1263709331728 is: 关键字is比较两个变量的内存地址是否一致，返回布尔。由于解释器优化，小的整数和短的字符串会公用内存。a=1 b=1 a is b True; a=12345 b=12345 a is b False。 del： 关键字del ， del a。 数学运算符 加+，减-，乘*，除 / 。 ‘你好’ + ‘小明’ ‘你好小明’ 。优先级一般 次方 2**3， 除过取整 // int(3.33) 3 ,取余 10%3 1 。优先级较高 （位运算 先不用记） &amp; &lt;&lt; &gt;&gt; | 。优先级最高。 逻辑比较运算符(比较）&lt; &gt; &lt;= &gt;= == != ,注意=表示赋值、==表示比较。 优先级偏低。运算符优先级不确定的时候，用小括号改变优先级。 1代表True，0代表False，空列表也代表False。 集合运算符比较的是bool值。与and 、 或or 、 not 、 in。 优先级最低。 True and True → True ，其它False。 False or False → False， 其它情况 True not True → False 1 in [1,2,3] → True 问题 is 跟 == 有什么区别？答： ==比较两个值是否相当。 is比较的是内存地址是否相等。 基础类型有哪些？答： int，float， bool， str]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
</search>
